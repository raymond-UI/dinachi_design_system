{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "list",
  "type": "registry:component",
  "title": "List Component",
  "author": "Mzed studio (https://mzed.studio) <raymond@mzed.studio>",
  "description": "A comprehensive list component for displaying items in a structured format.",
  "dependencies": [
    "class-variance-authority",
    "lucide-react",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/list/list.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { ChevronRight } from \"lucide-react\";\n\n// Centralized size configuration\nconst sizeConfig = {\n  sm: {\n    item: \"p-2 text-sm\",\n    leading: \"h-4 w-4 mr-2\",\n    action: \"h-4 w-4\",\n    groupTitle: \"text-sm\",\n    groupTitleIcon: \"h-3 w-3\",\n  },\n  md: {\n    item: \"p-2 text-base\",\n    leading: \"h-5 w-5 mr-2\",\n    action: \"h-5 w-5\",\n    groupTitle: \"text-base\",\n    groupTitleIcon: \"h-4 w-4\",\n  },\n  lg: {\n    item: \"p-3 text-lg\",\n    leading: \"h-6 w-6 mr-3\",\n    action: \"h-6 w-6\",\n    groupTitle: \"text-lg\",\n    groupTitleIcon: \"h-5 w-5\",\n  },\n} as const;\n\ntype SizeType = keyof typeof sizeConfig;\n\n// Enhanced Context to share list properties\ninterface ListContextValue {\n  variant: \"default\" | undefined;\n  listRole?: \"list\" | \"listbox\" | \"menu\";\n  isInteractive?: boolean;\n  titleId?: string;\n  descriptionId?: string;\n}\n\nconst ListContext = React.createContext<ListContextValue>({\n  variant: undefined,\n  listRole: \"list\",\n  isInteractive: false,\n});\n\nconst listVariants = cva(\"w-full\", {\n  variants: {\n    variant: {\n      default: \"\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\ninterface ListProps\n  extends Omit<React.HTMLAttributes<HTMLUListElement>, 'aria-label'> {\n  'aria-label': string;\n  'aria-labelledby'?: string;\n  'aria-describedby'?: string;\n  listRole?: \"list\" | \"listbox\" | \"menu\";\n  orientation?: \"horizontal\" | \"vertical\";\n  isInteractive?: boolean;\n  description?: string;\n  variant?: \"default\";\n}\n\nconst List = React.forwardRef<HTMLUListElement, ListProps>(\n  ({\n    className,\n    variant,\n    listRole = \"list\",\n    orientation = \"vertical\",\n    isInteractive = false,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    description,\n    ...props\n  }, ref) => {\n    const titleId = React.useId();\n    const descriptionId = React.useId();\n\n    const ariaProps = {\n      ...(listRole === \"list\" ? {} : { \"aria-orientation\": orientation }),\n      ...(ariaLabel ? { \"aria-label\": ariaLabel } : {}),\n      ...(ariaLabelledBy ? { \"aria-labelledby\": ariaLabelledBy } : {}),\n      ...(description || ariaDescribedBy ? { \n        \"aria-describedby\": ariaDescribedBy || descriptionId \n      } : {})\n    };\n\n    return (\n      <ListContext.Provider value={{ \n        variant: variant ?? \"default\",\n        listRole,\n        isInteractive,\n        titleId,\n        descriptionId\n      }}>\n        {description && (\n          <div id={descriptionId} className=\"sr-only\">\n            {description}\n          </div>\n        )}\n        <ul\n          ref={ref}\n          role={listRole}\n          {...ariaProps}\n          className={cn(listVariants({ variant }), className)}\n          {...props}\n        />\n      </ListContext.Provider>\n    );\n  }\n);\nList.displayName = \"List\";\n\nconst listItemVariants = cva(\n  \"flex items-center justify-between w-full transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 rounded mb-2 last:mb-0\",\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        bordered: \"border-b border-dashed last:border-none rounded-none\",\n        interactive: \"transition-colors duration-200 ease-in-out hover:bg-accent cursor-pointer active:text-primary\",\n        striped: \"odd:bg-muted/50 even:bg-none\",\n      },\n      size: {\n        sm: sizeConfig.sm.item,\n        md: sizeConfig.md.item,\n        lg: sizeConfig.lg.item,\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n    },\n  }\n);\n\ninterface ListItemProps\n  extends React.HTMLAttributes<HTMLLIElement>,\n    VariantProps<typeof listItemVariants> {\n  disabled?: boolean;\n  selected?: boolean;\n  leading?: React.ReactNode;\n  size?: SizeType;\n  description?: string;\n  'aria-labelledby'?: string;\n  'aria-describedby'?: string;\n}\n\nconst ListItem = React.forwardRef<HTMLLIElement, ListItemProps>(\n  ({ \n    className,\n    variant,\n    size = \"md\",\n    disabled,\n    selected,\n    leading,\n    onClick,\n    description,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    children,\n    ...props \n  }, ref) => {\n    const { listRole, isInteractive } = React.useContext(ListContext);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const descriptionId = React.useId();\n\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLLIElement>) => {\n      if (!disabled && isInteractive && onClick && (event.key === \"Enter\" || event.key === \" \")) {\n        event.preventDefault();\n        onClick(event as unknown as React.MouseEvent<HTMLLIElement>);\n      }\n    };\n\n    return (\n      <>\n        {description && (\n          <div id={descriptionId} className=\"sr-only\">\n            {description}\n          </div>\n        )}\n        <li\n          ref={ref}\n          role={\n            listRole === \"listbox\"\n              ? \"option\"\n              : listRole === \"menu\"\n              ? \"menuitem\"\n              : undefined\n          }\n          aria-disabled={disabled}\n          aria-selected={listRole === \"listbox\" ? selected : undefined}\n          aria-labelledby={ariaLabelledBy}\n          aria-describedby={ariaDescribedBy || (description ? descriptionId : undefined)}\n          tabIndex={isInteractive && !disabled ? 0 : undefined}\n          onClick={disabled ? undefined : onClick}\n          onKeyDown={handleKeyDown}\n          onFocus={() => setIsFocused(true)}\n          onBlur={() => setIsFocused(false)}\n          className={cn(\n            listItemVariants({ variant, size }),\n            selected && \"bg-primary/5 text-primary\",\n            isFocused && \"outline-1 outline-offset-1 outline-focus text-primary\",\n            className\n          )}\n          {...props}\n        >\n          {leading && (\n            <div\n              className={cn(\n                \"flex items-center justify-center shrink-0\",\n                sizeConfig[size].leading\n              )}\n            >\n              {leading}\n            </div>\n          )}\n          {children}\n        </li>\n      </>\n    );\n  }\n);\nListItem.displayName = \"ListItem\";\n\ninterface ListItemContentProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  \"aria-labelledby\"?: string;\n}\n\nconst ListItemContent = React.forwardRef<HTMLDivElement, ListItemContentProps>(\n  ({ children, className, \"aria-labelledby\": ariaLabelledBy, ...props }, ref) => {\n    const isSimpleText = React.Children.toArray(children).every(\n      (child) => typeof child === \"string\"\n    );\n\n    const Wrapper = isSimpleText ? \"p\" : \"div\";\n\n    return (\n      <Wrapper\n        ref={ref}\n        aria-labelledby={ariaLabelledBy}\n        className={cn(\"flex-grow min-w-0 flex text-wrap truncate gap-1\", className)}\n        {...props}\n      >\n        {children}\n      </Wrapper>\n    );\n  }\n);\nListItemContent.displayName = \"ListItemContent\";\n\ninterface ListItemActionProps extends React.HTMLAttributes<HTMLDivElement> {\n  size?: SizeType;\n  \"aria-label\"?: string;\n}\n\nconst ListItemAction = React.forwardRef<HTMLDivElement, ListItemActionProps>(\n  ({ className, size = \"md\", \"aria-label\": ariaLabel, ...props }, ref) => (\n    <div\n      ref={ref}\n      aria-label={ariaLabel}\n      className={cn(\n        \"ml-2 flex items-center\",\n        sizeConfig[size].action,\n        className\n      )}\n      {...props}\n    />\n  )\n);\nListItemAction.displayName = \"ListItemAction\";\n\nconst listGroupVariants = cva(\"flex flex-col\", {\n  variants: {\n    variant: {\n      default: \"items-start\",\n      compact: \"items-start\",\n      spaced: \"items-start space-y-2\",\n      collapsible: \"items-start\", \n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\ninterface ListGroupProps\n  extends React.HTMLAttributes<HTMLElement>,\n    VariantProps<typeof listGroupVariants> {\n  \"aria-label\"?: string;\n  \"aria-labelledby\"?: string;\n  description?: string;\n  defaultExpanded?: boolean; \n}\n\nconst ListGroup = React.forwardRef<HTMLElement, ListGroupProps>(\n  ({ \n    className, \n    variant, \n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    description,\n    defaultExpanded = true,\n    children, \n    ...props \n  }, ref) => {\n    const listContext = React.useContext(ListContext);\n    const descriptionId = React.useId();\n    const [isExpanded, setIsExpanded] = React.useState(defaultExpanded);\n    \n    const childrenArray = React.Children.toArray(children);\n    const titleElement = childrenArray.find(\n      child => React.isValidElement(child) && child.type === ListGroupTitle\n    );\n    const items = childrenArray.filter(\n      child => React.isValidElement(child) && child.type === ListItem\n    );\n\n    const handleKeyDown = (event: React.KeyboardEvent) => {\n      if (event.key === \"Enter\" || event.key === \" \") {\n        event.preventDefault();  \n        setIsExpanded(!isExpanded);\n      }\n    };\n\n    const titleWithCollapse = variant === 'collapsible' && titleElement\n      ? React.cloneElement(titleElement as React.ReactElement<ListGroupTitleProps>, {\n          onClick: () => setIsExpanded(!isExpanded),\n          onKeyDown: handleKeyDown, \n          role: \"button\",\n          tabIndex: 0, \n          \"aria-expanded\": isExpanded,\n          \"aria-controls\": `group-content-${descriptionId}`,\n          className: cn(\n            (titleElement as React.ReactElement<ListGroupTitleProps>).props.className,\n            \"cursor-pointer hover:text-primary transition-colors\",\n            \"flex items-center focus:outline-none focus:ring-1 focus:ring-primary focus:ring-offset-2 focus-ring-rounded-md\"\n          ),\n          children: (\n            <>\n              <div className=\"flex flex-row items-center\">\n                {(titleElement as React.ReactElement<ListGroupTitleProps>).props.children}\n                <ChevronRight\n                  className={cn(\n                    \"mr-1 transition-transform\",\n                    isExpanded && \"transform rotate-90\"\n                  )}\n                />\n              </div>\n            </>\n          ),\n        })\n      : titleElement;\n    \n    if (listContext.listRole === \"list\") {\n      return (\n        <li\n          ref={ref as React.Ref<HTMLLIElement>}\n          className=\"list-none flex flex-col items-start w-full px-1\"\n        >\n          {description && (\n            <div id={descriptionId} className=\"sr-only\">\n              {description}\n            </div>\n          )}\n          {titleWithCollapse}\n          <ul \n            id={`group-content-${descriptionId}`}\n            className={cn(\n              \"w-full transition-all duration-200\",\n              listGroupVariants({ variant }),\n              variant === 'collapsible' && !isExpanded && \"hidden\",\n              className\n            )}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={description ? descriptionId : undefined}\n            role={variant === 'collapsible' ? \"region\" : undefined}\n          >\n            {items}\n          </ul>\n        </li>\n      );\n    }\n\n    return (\n      <div\n        ref={ref as React.Ref<HTMLDivElement>}\n        role=\"group\"\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={description ? descriptionId : undefined}\n        className={cn(listGroupVariants({ variant }), className)}\n        {...props}\n      >\n        {description && (\n          <div id={descriptionId} className=\"sr-only\">\n            {description}\n          </div>\n        )}\n        {titleWithCollapse}\n        <div\n          id={`group-content-${descriptionId}`}\n          className={cn(\n            \"w-full transition-all duration-200\",\n            variant === 'collapsible' && !isExpanded && \"hidden\"\n          )}\n          role={variant === 'collapsible' ? \"region\" : undefined}\n        >\n          {items}\n        </div>\n      </div>\n    );\n  }\n);\nListGroup.displayName = \"ListGroup\";\n\nconst listGroupTitleVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 mt-3 mb-1\",\n  {\n    variants: {\n      variant: {\n        default: \"text-muted-foreground\",\n        primary: \"text-primary\",\n        accent: \"text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\ninterface ListGroupTitleProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof listGroupTitleVariants> {\n  icon?: React.ReactNode;\n  size?: SizeType;\n  description?: string;\n}\n\nconst ListGroupTitle = React.forwardRef<HTMLDivElement, ListGroupTitleProps>(\n  ({ className, variant, icon, size = \"sm\", description, children, ...props }, ref) => {\n    const descriptionId = React.useId();\n    const titleId = React.useId();\n\n    return (\n      <>\n        {description && (\n          <div id={descriptionId} className=\"sr-only\">\n            {description}\n          </div>\n        )}\n        <div\n          ref={ref}\n          id={titleId}\n          aria-describedby={description ? descriptionId : undefined}\n          className={cn(\n            \"flex items-center space-x-1\",\n            listGroupTitleVariants({ variant }),\n            sizeConfig[size].groupTitle,\n            className\n          )}\n          {...props}\n        >\n          {icon && (\n            <div className={cn(\n              \"flex items-center justify-center\",\n              sizeConfig[size].groupTitleIcon\n            )}>\n              {icon}\n            </div>\n          )}\n          <span>{children}</span>\n        </div>\n      </>\n    );\n  }\n);\nListGroupTitle.displayName = \"ListGroupTitle\";\n\nexport {\n  List,\n  ListItem,\n  ListItemContent,\n  ListItemAction,\n  ListGroup,\n  ListGroupTitle,\n  type ListProps,\n  type ListItemProps,\n  type ListItemActionProps,\n  type ListGroupProps,\n  type ListGroupTitleProps,\n  type SizeType,\n};",
      "type": "registry:component"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    }
  ],
  "categories": [
    "component"
  ]
}